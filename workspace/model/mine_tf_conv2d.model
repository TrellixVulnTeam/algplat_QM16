{"model":{"opTime":1569226411,"supervised":0,"preprocess":1,"featureSelect":0,"classifier":0,"regressor":0,"cluster":0,"timeSeries":0,"mining":0,"pythonClass":"mine_tf_conv2d","pythonClassImport":"import tensorflow as tf","pythonClassDefine":"import tensorflow as tf\n\nclass mine_tf_conv2d:\n    def __init__(self):\n        self._params = {}\n        self.vars = {}\n        self.out = None\n\n    def get_params(self, deep=True):\n        return self._params\n\n    def set_params(self, **params):\n        for (k, v) in params.items():\n            self._params[k] = v\n\n    def fit(self, data, y=None):\n        return self\n\n    def transform(self, data):\n        return data\n\n    def __getstate__(self):\n        return self._params\n\n    def __setstate__(self, state):\n        self._params = state\n\n    def build(self, in_node, y_true, feed_dict_train, feed_dict_test):\n        kernel_width = int(self._params.get('kernel_width'))\n        kernel_height = int(self._params.get('kernel_height'))\n        in_channel = in_node.shape.as_list()[3]\n        out_channel = int(self._params.get('out_channel'))\n        stride_width = int(self._params.get('stride_width'))\n        stride_height = int(self._params.get('stride_height'))\n        padding = self._params.get('padding')\n        kernel_initializer = self._params.get('kernel_initializer', 'zeros')\n        kernel_initializer_arg = self._params.get('kernel_initializer_arg')\n        bias_initializer = self._params.get('bias_initializer', 'zeros')\n        bias_initializer_arg = self._params.get('bias_initializer_arg')\n        activation = self._params.get('activation')\n        lrn = self._params.get('lrn')\n\n        if kernel_initializer == 'one':\n            kernel = tf.Variable(tf.one([kernel_width, kernel_height, in_channel, out_channel]))\n        elif kernel_initializer == 'constant':\n            kernel = tf.Variable(tf.constant(float(kernel_initializer_arg), shape=[kernel_width, kernel_height, in_channel, out_channel]))\n        elif kernel_initializer == 'truncated_normal':\n            kernel = tf.Variable(tf.truncated_normal([kernel_width, kernel_height, in_channel, out_channel], stddev=float(kernel_initializer_arg)))\n        else:  # default 'zeros'\n            kernel = tf.Variable(tf.zeros([kernel_width, kernel_height, in_channel, out_channel]))\n\n        if bias_initializer == 'one':\n            bias = tf.Variable(tf.one([out_channel]))\n        elif bias_initializer == 'constant':\n            bias = tf.Variable(tf.constant(float(bias_initializer_arg), shape=[out_channel]))\n        elif bias_initializer == 'truncated_normal':\n            bias = tf.Variable(tf.truncated_normal([out_channel], stddev=float(bias_initializer_arg)))\n        else:  # default 'zeros'\n            bias = tf.Variable(tf.zeros([out_channel]))\n\n        out = tf.nn.conv2d(in_node, kernel, strides=[1, stride_width, stride_height, 1], padding=padding) + bias\n        if activation == 'softmax':\n            self.out = tf.nn.softmax(out)\n        elif activation == 'relu':\n            self.out = tf.nn.relu(out)\n        else:\n            self.out = out\n\n        if lrn is not None:\n            items = lrn.split('_')\n            lrn_depth_radius = int(items[0])\n            lrn_bias = float(items[1])\n            lrn_alpha = float(items[2])\n            lrn_beta = float(items[3])\n            self.out = tf.nn.lrn(self.out, lrn_depth_radius, bias=lrn_bias, alpha=lrn_alpha, beta=lrn_beta)\n\n        self.vars['kernel'] = kernel\n        self.vars['bias'] = bias","desc":"tf 二维卷积","inputParams":[{"name":"kernel_initializer","valueSet":"'zeros' 'one' 'truncated_normal' 'constant'","defaultValue":"'zeros'","candidateValues":"","desc":"核矩阵初始化","option":1},{"name":"bias_initializer","valueSet":"'zeros' 'one' 'truncated_normal' 'constant'","defaultValue":"'zeros'","candidateValues":"","desc":"偏移向量初始化","option":1},{"name":"activation","valueSet":"None 'softmax' 'relu'","defaultValue":"None","candidateValues":"","desc":"激励","option":1},{"name":"kernel_initializer_arg","valueSet":"None str","defaultValue":"None","candidateValues":"","desc":"核矩阵初始化参数","option":1},{"name":"bias_initializer_arg","valueSet":"None str","defaultValue":"None","candidateValues":"","desc":"偏移向量初始化参数","option":1},{"name":"kernel_width","valueSet":"I>0","defaultValue":"","candidateValues":"","desc":"核矩阵宽度","option":0},{"name":"kernel_height","valueSet":"I>0","defaultValue":"","candidateValues":"","desc":"核矩阵高度","option":0},{"name":"out_channel","valueSet":"I>0","defaultValue":"","candidateValues":"","desc":"输出通道","option":0},{"name":"stride_width","valueSet":"I>0","defaultValue":"","candidateValues":"","desc":"步长宽度","option":0},{"name":"stride_height","valueSet":"I>0","defaultValue":"","candidateValues":"","desc":"步长高度","option":0},{"name":"padding","valueSet":"'SAME' 'VALID'","defaultValue":"","candidateValues":"","desc":"是否补零","option":0},{"name":"lrn","valueSet":"str","defaultValue":"","candidateValues":"","desc":"局部响应归一化。四项值下划线分隔：depth_radius bias alpha beta","option":1}],"studyParams":[],"useExample":""}}