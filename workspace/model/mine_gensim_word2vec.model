{"model":{"opTime":1566992372,"supervised":0,"preprocess":0,"featureSelect":0,"classifier":0,"regressor":0,"cluster":0,"timeSeries":0,"mining":1,"pythonClass":"mine_gensim_word2vec","pythonClassImport":"import logging\nimport gensim","pythonClassDefine":"class mine_gensim_word2vec:\n    def __init__(self):\n        self._params = {}\n        self._wv = None\n\n    def get_params(self, deep=True):\n        return self._params\n\t\n    def set_params(self, **params):\n        for (k,v) in params.items():\n            self._params[k] = v\n\n    def fit(self, data, y=None):\n        logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)\n        size = self._params.get('size', 100)\n        window = self._params.get('window', 5)\n        min_count = self._params.get('min_count', 5)\n        sg = self._params.get('sg', 0)\n        hs = self._params.get('hs', 0)\n        negative = self._params.get('negative', 5)\n        m = gensim.models.Word2Vec(data, size=size, window=window, min_count=min_count, sg=sg, hs=hs, negative=negative)\n        self._wv = m.wv\n\n    def transform(self, data):\n        pass\n\n    def predict(self, len):\n        pass\n\n    def __getstate__(self):\n        return self._params\n\n    def __setstate__(self, state):\n        self._params = state\n\n    def dump_ext(self, file):\n        self._wv.save_word2vec_format(file)\n\n    def load_ext(self, file):\n        self._wv = gensim.models.KeyedVectors.load_word2vec_format(file)","desc":"https://radimrehurek.com/gensim/models/word2vec.html\nhttps://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec","inputParams":[],"studyParams":[],"useExample":""}}